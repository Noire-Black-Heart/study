package com.billiard;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.JFrame;

public class TFrame extends JFrame implements MouseListener,MouseMotionListener,Runnable{
	
	private Color[] clr = new Color[5];
	private double X=0,Y=0;/*鼠标当前坐标*/
	private String msact = null;
	private Ball mBall;/*母球*/
	private double strength = 1;
	private Ball[] balls;/*9球*/
	
	private BufferedImage gbl = null;
	private BufferedImage bi = null;
	private Graphics gbi = null;

	private Thread t;
	public TFrame(){
		this.setBounds(200,100,800,550);
		this.setVisible(true);
		this.setDefaultCloseOperation(EXIT_ON_CLOSE);
		this.addMouseListener(this);
		this.addMouseMotionListener(this);
		clr[0] = new Color(128,64,0);/*brown*/
		clr[1] = new Color(0,200,0);/*green*/
		init();
	}
	public static void main(String[] args){
		TFrame tf = new TFrame();
	}
	public void drawDesk(Graphics g){
		bi = (BufferedImage) createImage(800,550);
		gbi = bi.getGraphics();
		gbi.setColor(clr[0]);
		gbi.fillRoundRect(0, 30, 800, 430, 100, 100);/*look API*/
		gbi.setColor(clr[1]);
		gbi.fillRect(45, 65, 710, 360);
		gbi.setColor(Color.WHITE);
		gbi.drawLine(222, 65, 222, 425);
		
		gbi.setColor(Color.BLACK);
		/*draw 6 black hole*/
		gbi.fillOval(30, 50, 40, 40);
		gbi.fillOval(30, 400, 40, 40);
		gbi.fillOval(730, 50, 40, 40);
		gbi.fillOval(730, 400, 40, 40);
		gbi.fillOval(380, 40, 40, 40);
		gbi.fillOval(380, 410, 40, 40);
		/*draw star*/
		for(int i=45+88;i<=800-88;i+=88){
			gbi.fillOval(i, 47, 5, 5);
			gbi.fillOval(i, 442, 5, 5);
		}
		for(int i=65+90;i<=430-90;i+=90){
			gbi.fillOval(23, i, 5, 5);
			gbi.fillOval(773, i, 5, 5);
		}
		
	}
	public void paint(Graphics g){
		drawDesk(g);

		if(mBall.vsble){
			gbi.setColor(mBall.clr);
			gbi.fillOval((int)mBall.X, (int)mBall.Y, 24, 24);
		}
		for(int i=1;i<=9;i++){
			if(balls[i].vsble){
				gbi.setColor(balls[i].clr);
				gbi.fillOval((int)balls[i].X, (int)balls[i].Y, 24, 24);
				gbi.setColor(Color.WHITE);
				gbi.drawString(i+"", (int)balls[i].X+10, (int)balls[i].Y+15);
			}
		}

		gbi.fillOval((int)X-12,(int)Y-12,24,24);
		gbi.drawLine((int)mBall.X+12, (int)mBall.Y+12,(int)X,(int)Y);
		g.drawImage(bi,0,0, null);
	}
	public void init(){
		
		mBall = new Ball(211,211,Color.WHITE);/*母球*/
		balls = new Ball[10];
		balls[0] = mBall;/*引用*/
		balls[1] = new Ball(574,227,Color.YELLOW);
		balls[2] = new Ball(574+42,227+24,Color.BLUE);
		balls[3] = new Ball(574+83,227,Color.RED);
		balls[4] = new Ball(574+42,227-24,new Color(100,20,130));
		balls[5] = new Ball(574+21,227-12,Color.PINK);
		balls[6] = new Ball(574+21,227+12,Color.GREEN);
		balls[7] = new Ball(574+62,227+12,new Color(90,44,30));
		balls[8] = new Ball(574+62,227-12,Color.BLACK);
		balls[9] = new Ball(574+42,227,new Color(200,190,190));
		/*
		balls[1] = new Ball(50,227,Color.YELLOW);
		balls[2] = new Ball(100+42,227+24,Color.BLUE);
		balls[3] = new Ball(150+83,227,Color.RED);
		balls[4] = new Ball(533+42,227-24,new Color(100,20,130));
		balls[5] = new Ball(250+21,227-12,Color.PINK);
		balls[6] = new Ball(100+21,127+12,Color.GREEN);
		balls[7] = new Ball(474+62,327+12,new Color(90,44,30));
		balls[8] = new Ball(574+62,627-12,Color.BLACK);
		balls[9] = new Ball(274+42,427,new Color(200,190,190));
		*/
		t = new Thread(this);
		t.start();
	}

	@Override
	public void mouseClicked(MouseEvent e) {
	}

	@Override
	public void mouseEntered(MouseEvent e) {
		
	}

	@Override
	public void mouseExited(MouseEvent e) {

	}

	@Override /*按下*/
	public void mousePressed(MouseEvent e) {

		this.msact = "Pressed";
		this.X=e.getX();
		this.Y=e.getY();
	}

	@Override /*释放*/
	public void mouseReleased(MouseEvent e) {

		this.msact = null;
		double v = 10*strength;
		double yc = Y-mBall.Y-12;
		double xc = X-mBall.X-12;
		double k;
		k= (Y-mBall.Y-12)/(X-mBall.X-12);
		k=k>0?k:-k;
		if(mBall.vsble){
			mBall.vx = v/Math.sqrt(1+k*k);
			mBall.vy = k*v/Math.sqrt(1+k*k);
			if(xc<0)
				mBall.vx=-mBall.vx;
			if(yc<0)
				mBall.vy=-mBall.vy;
		}
		else{
			mBall.vsble=true;
			mBall.X=this.X-12;
			mBall.Y=this.Y-12;
		}
	}
	@Override
	public void mouseDragged(MouseEvent e) {

	}
	@Override/*移动*/
	public void mouseMoved(MouseEvent e) {

		if(msact==null){
		this.X=e.getX();
		this.Y=e.getY();
		repaint();
		}
	}
	public void moveBall(){
		for(int i=0;i<=9;i++)
			balls[i].lifeIsMove();
	}

	public void vslowdown(){
		for(int i=0;i<=9;i++)
			balls[i].vslow();
	}
	public void isinHole(){
		/*这个函数没好好写，意思意思就行了*/
		/*请看之前paint的注释，这是6个Black Hole*/
		/*什么是Black Hole?就是黑洞的意思*/
		/*什么是黑洞？黑洞你懂吗？
		 * 就是一靠近，就立刻被吸引*/
		/*这也是为了减少游戏难度*/
		for(int i=0;i<=9;i++){
			/*四角*/
			if((balls[i].X<=45+12||balls[i].X>=721-12) &&
					(balls[i].Y<=65+12||balls[i].Y>=401-12)){
				balls[i].vsble=false;
				balls[i].vx=balls[i].vy=0;
			}
			/*中间两洞*/
			if(balls[i].X<=420 && balls[i].X>=380 &&
					(balls[i].Y<=65+12||balls[i].Y>=401-12)){
				balls[i].vsble=false;
				balls[i].vx=balls[i].vy=0;
			}
		}
	}
	public void crashWall(){
		for(int i=0;i<=9;i++){
			if(balls[i].X-Math.abs(balls[i].vx)<=45 || balls[i].X+Math.abs(balls[i].vx)>=721){
				balls[i].overturnx();
			}
			if(balls[i].Y-Math.abs(balls[i].vy)<=65 || balls[i].Y+Math.abs(balls[i].vy)>=401){
				balls[i].overturny();
			}
		}
	}

	public void crashBall(){
		for(int i=0;i<=9;i++){
			for(int j=0;j<=9;j++)
				if(i!=j && balls[i].vsble
						&& (Math.abs(balls[i].vx)+Math.abs(balls[i].vy))>0.01
						&& balls[i].isCrash(balls[j])
						&& balls[j].crlst[i]!=true){
					balls[i].crlst[j]=true;
					balls[i].crashWith(balls[j]);	
				}
		}
	}

	@Override
	public void run() {

		try {
			int iiii=0;
			while(true){
				iiii++;
				isinHole();
				crashWall();
				crashBall();
				
				moveBall();
				vslowdown();
				if(iiii==4){
					this.repaint();
					iiii=0;
				}
				Thread.sleep(10);
			}
		} catch (InterruptedException ee) {
			ee.printStackTrace();
		}
	}

}

class Ball{
	double X = 0,Y = 0;/*球所在正方形左上角*/
	double vx = 0,vy = 0;
	Color clr = null;
	boolean []crlst = new boolean[10];
	boolean vsble = true;
	public Ball(){
	}
	public Ball(int x,int y,Color clr){
		this.X=x;
		this.Y=y;
		this.clr=clr;
	}
	public void overturnx(){
		this.vx=-vx;
	}
	public void overturny(){
		this.vy=-vy;
	}
	/*生命在于运动*/
	public void lifeIsMove(){
		this.X += this.vx;
		this.Y += this.vy;
	}
	
	public void vslow(){
		double x,y;
		x=this.vx;
		y=this.vy;
		if(x>0){
			if(this.vx>=0.01){
				this.vx -= x/Math.sqrt(Math.hypot(x,y))/80;
				//mBall.vx *= 0.9;
			}
			else
				this.vx=0;
		}
		if(x<0){
			if(this.vx<=-0.01){
				this.vx -= x/Math.sqrt(Math.hypot(x,y))/80;
				//mBall.vx *= 0.9;
			}
			else
				this.vx=0;
		}
		
		if(y>0){
			if(this.vy>=0.01){
				this.vy -= y/Math.sqrt(Math.hypot(x,y))/80;
				//mBall.vy *= 0.9;
			}
			else
				this.vy = 0;
		}
		else{
			if(this.vy<=-0.01){
				this.vy -= y/Math.sqrt(Math.hypot(x,y))/80;
				//mBall.vy *= 0.9;
			}
			else
				this.vy = 0;
		}
	}
	/*受限于线程10ms刷新一次，在这10ms内，球会运动
	 * 并不是我的碰撞判定算法不对，而是它会动
	 * 然后就会产生各种奇葩效果
	 * 比如，穿越。。。
	 * 比如，地球绕太阳旋转。。。
	 * 要想提高精度，就我目前算法而言，
	 * 就必须再次减少线程刷新时间
	 * 算了，就这样吧，偶尔圆周运动也挺好*/
	public boolean isCrash(Ball b){
		double x = this.X-b.X;
		double y = this.Y-b.Y;
		double p = this.vx*this.vx+this.vy*this.vy;
		double q = b.vx*b.vx+b.vy*b.vy;
		if(x*x+y*y<=24*24-50 && p+q>0)
			return true;
		return false;
	}
	
	public void crashWith(Ball b){
		double k = (this.X-b.X)/(this.Y-b.Y);
		
		b.vy = (k*this.vx+this.vy)/(k*k+1);
		b.vx = k*b.vy;
		
		this.vx-=b.vx;
		this.vy-=b.vy;	
	}
	public void crashWith(Ball b2,Ball b3){
		/*众所周知，我是一个很懒的人*/
		/*三球同时碰撞的方法，我不写了*/
		/*写起来也类似，用动量定理+动能定理*/
		/*不过就复杂一些*/
		/*我把三球碰撞的情况看成了一个球碰一个球
		 * 再过一个极短瞬间碰另一个
		 * 这样虽然不是很好，但也凑合
		 * 就是这个意思，有兴趣的可以试试*/
	}
}